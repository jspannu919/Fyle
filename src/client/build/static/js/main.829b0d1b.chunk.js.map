{"version":3,"sources":["utils/AppUtils.js","components/Table/index.js","components/Table/Table.jsx","App.jsx","components/Bank/index.js","components/Bank/Bank.jsx","index.js"],"names":["parseLabel","label","parsedLabel","i","length","charAt","toUpperCase","debounce","func","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","Table","branches","useState","localStorage","getItem","JSON","parse","favourites","setFavourites","setItem","stringify","columns","Object","keys","forEach","key","push","title","dataIndex","filters","text","value","onFilter","selected","record","indexOf","ifsc","getColumns","dataSource","map","branch","ind","to","count","onChange","ifscCode","filter","handleFavourite","rowKey","className","Option","Select","App","setBranches","state","setState","city","setCity","searchText","setSearchText","loading","setLoading","filteredData","useEffect","axios","get","then","data","shouldInclude","Number","includes","LoadingOutlined","htmlFor","newState","states","Set","add","sort","getStates","disabled","cities","getCities","size","placeholder","e","target","isNaN","prefix","SearchOutlined","Bank","props","params","useParams","setData","bankId","id","src","alt","width","name","ReactDOM","render","StrictMode","path","exact","document","getElementById"],"mappings":"+PAAO,SAASA,EAAWC,GAEzB,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IACtB,IAANA,EACFD,GAAeD,EAAMI,OAAOF,GAAGG,cACF,MAApBL,EAAMI,OAAOF,IAAcA,EAAIF,EAAMG,OAAS,GACvDF,GAAe,IAAMD,EAAMI,OAAOF,EAAI,GAAGG,cACzCH,KAEAD,GAAeD,EAAMI,OAAOF,GAGhC,OAAOD,EAGF,SAASK,EAASC,GACvB,IAAIC,EACJ,OAAO,WACL,IAAIC,EAAUC,KACZC,EAAOC,UACTC,aAAaL,GACbA,EAAQM,YAAW,WACjBP,EAAKQ,MAAMN,EAASE,KACnB,M,8BCrBQK,ECID,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACMC,mBAClCC,aAAaC,QAAQ,WACjBC,KAAKC,MAAMH,aAAaC,QAAQ,YAChC,IAJwB,mBACvBG,EADuB,KACXC,EADW,KAmE9B,OA5DAL,aAAaM,QAAQ,UAAWJ,KAAKK,UAAUH,IA6D7C,cAAC,IAAD,CACEI,QA5DJ,WACE,IAAIA,EAAU,GA6Bd,OA5BIV,EAASd,QACXyB,OAAOC,KAAKZ,EAAS,IAAIa,SAAQ,SAACC,GACpB,cAARA,EACFJ,EAAQK,KAAK,CACXC,MAAOlC,EAAWgC,GAClBG,UAAWH,EACXA,IAAKA,EACLI,QAAS,CACP,CAAEC,KAAM,iBAAkBC,MAAO,aACjC,CAAED,KAAM,MAAOC,MAAO,QAExBC,SAAU,SAACC,EAAUC,GACnB,MAAiB,cAAbD,IAC0C,IAArChB,EAAWkB,QAAQD,EAAOE,SAOvCf,EAAQK,KAAK,CACXC,MAAOlC,EAAWgC,GAClBG,UAAWH,EACXA,IAAKA,OAKNJ,EA8BIgB,GACTC,WAnBK3B,EAAS4B,KAAI,SAACC,EAAQC,GAC3B,OAAIA,EAAM,KACVD,EAAM,QACJ,cAAC,IAAD,CAAME,GAAI,SAAWF,EAAM,QAA3B,SAAyCA,EAAM,UAEjDA,EAAM,UACJ,cAAC,IAAD,CACET,OAA+C,IAAxCd,EAAWkB,QAAQK,EAAM,MAAmB,EAAI,EACvDG,MAAO,EACPC,SAAU,SAACX,GAAD,OAlBlB,SAAyBA,EAAUY,GAE/B3B,EADEe,EACY,GAAD,mBAAKhB,GAAL,CAAiB4B,IAEhB5B,EAAW6B,QAAO,SAACV,GAAD,OAAUA,IAASS,MAcvBE,CAAgBd,EAAUO,EAAM,UARvCA,KAmBrBQ,OAAO,OACPC,UAAU,W,kDCtERC,EAAWC,IAAXD,OAqIOE,MAnIf,WAAgB,IAAD,EACmBxC,mBAAS,IAD5B,mBACND,EADM,KACI0C,EADJ,OAEazC,mBAAS,OAFtB,mBAEN0C,EAFM,KAECC,EAFD,OAGW3C,mBAAS,OAHpB,mBAGN4C,EAHM,KAGAC,EAHA,OAIuB7C,mBAAS,IAJhC,mBAIN8C,EAJM,KAIMC,EAJN,OAKiB/C,oBAAS,GAL1B,mBAKNgD,EALM,KAKGC,EALH,KAMTC,EAAe,GA4EnB,OA1EAC,qBAAU,WACRC,IAAMC,IAAI,iBAAiBC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACjCd,EAAYc,GACZN,GAAW,QAEZ,IAOGC,EAFU,QAAVR,EACW,QAATE,EACa7C,EAASmC,QACtB,SAACN,GAAD,OAAYA,EAAOc,QAAUA,GAASd,EAAOgB,OAASA,KAGzC7C,EAASmC,QAAO,SAACN,GAAD,OAAYA,EAAOc,QAAUA,KAE1C3C,EAGlB+C,EAAW7D,SACbiE,EAAeA,EAAahB,QAAO,SAACN,GAClC,IAAI4B,GAAgB,EAOpB,OANA9C,OAAOC,KAAKiB,GAAQhB,SAAQ,SAACC,GACf,cAARA,IAEF2C,GADiB,YAAR3C,EACQe,EAAOf,KAAS4C,OAAOX,GACpBlB,EAAOf,GAAK6C,SAASZ,OAEtCU,MA6CX,qBAAKnB,UAAU,MAAf,SACGW,EACC,cAACW,EAAA,EAAD,CAAiBtB,UAAU,gBAE3B,qCACE,0CACA,sBAAKA,UAAU,kBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,uBAAOuB,QAAQ,QAAf,qBACA,eAAC,IAAD,CACEzC,MAAOuB,EACPL,UAAU,iBACVL,SAzBd,SAA4B6B,GAC1BlB,EAASkB,GACThB,EAAQ,QAoBE,UAKE,cAACP,EAAD,CAAQnB,MAAM,MAAd,gBAAwB,OAtCtC,WACE,IAAI2C,EAAS,IAAIC,IAEjB,OADAhE,EAASa,SAAQ,SAACgB,GAAD,OAAYkC,EAAOE,IAAIpC,EAAOc,UACxC,YAAIoB,GAAQG,OAAOtC,KAAI,SAACe,GAAD,OAC5B,cAACJ,EAAD,CAAoBnB,MAAOuB,EAA3B,SACGA,GADUA,MAqCFwB,MAGH,uBAAON,QAAQ,OAAf,oBACA,eAAC,IAAD,CACEzC,MAAOyB,EACPP,UAAU,gBACVL,SAAUa,EACVsB,SAAoB,QAAVzB,EAJZ,UAME,cAACJ,EAAD,CAAQnB,MAAM,MAAd,gBAAwB,OAlEtC,WACE,GAAc,QAAVuB,EAAiB,CACnB,IAAI0B,EAAS,IAAIL,IAIjB,OAHAhE,EAASa,SAAQ,SAACgB,GACZA,EAAOc,QAAUA,GAAO0B,EAAOJ,IAAIpC,EAAOgB,SAEzC,YAAIwB,GAAQH,OAAOtC,KAAI,SAACiB,GAAD,OAC5B,cAACN,EAAD,CAAmBnB,MAAOyB,EAA1B,SACGA,GADUA,MAIV,MAAO,GA0DDyB,SAGL,cAAC,IAAD,CACEC,KAAK,QACLC,YAAY,SACZlC,UAAU,YACVL,SAAU5C,GA5CtB,SAAuBoF,GACrB,IAAItD,EAAOsD,EAAEC,OAAOtD,MAChBsC,OAAOiB,MAAMjB,OAAOvC,IAAQ6B,EAAc7B,EAAK/B,eAC9C4D,EAAc7B,MA0CTyD,OAAQ,cAACC,EAAA,EAAD,SAGZ,cAAC,EAAD,CAAO7E,SAAUmD,U,QCrIZ2B,ECKF,SAACC,GACZ,IAAMC,EAASC,cADO,EAEEhF,mBAAS,IAFX,mBAEfuD,EAFe,KAET0B,EAFS,OAGQjF,oBAAS,GAHjB,mBAGfgD,EAHe,KAGNC,EAHM,KAIlBiC,EAASH,EAAOI,GASpB,OAPAhC,qBAAU,WACRC,IAAMC,IAAI,cAAgB6B,GAAQ5B,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACxC0B,EAAQ1B,GACRN,GAAW,QAEZ,CAACiC,IAEGlC,EACL,cAACW,EAAA,EAAD,CAAiBtB,UAAU,gBAE3B,sBAAKA,UAAU,MAAf,UACE,qBAAK+C,IAAI,0BAA0BC,IAAI,OAAOC,MAAO,MACrD,6BAAK/B,EAAKgC,MAAQ,mBAClB,kDAAqBhC,EAAKxD,SAAWwD,EAAKxD,SAASd,OAAS,KAC5D,cAAC,EAAD,CAAOc,SAAUwD,EAAKxD,UAAY,SClBxCyF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAK,EAA7B,SACE,cAAC,EAAD,aAKRC,SAASC,eAAe,W","file":"static/js/main.829b0d1b.chunk.js","sourcesContent":["export function parseLabel(label) {\n  let parsedLabel = \"\";\n  for (let i = 0; i < label.length; i++) {\n    if (i === 0) {\n      parsedLabel += label.charAt(i).toUpperCase();\n    } else if (label.charAt(i) === \"_\" && i < label.length - 1) {\n      parsedLabel += \" \" + label.charAt(i + 1).toUpperCase();\n      i++;\n    } else {\n      parsedLabel += label.charAt(i);\n    }\n  }\n  return parsedLabel;\n}\n\nexport function debounce(func) {\n  let timer;\n  return function () {\n    let context = this,\n      args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(context, args);\n    }, 300);\n  };\n}\n","import Table from \"./Table\";\n\nexport default Table;\n","import \"./Table.css\";\nimport { parseLabel } from \"./../../utils/AppUtils\";\nimport { Table as TableComp, Rate } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\n\nconst Table = ({ branches }) => {\n  const [favourites, setFavourites] = useState(\n    localStorage.getItem(\"favList\")\n      ? JSON.parse(localStorage.getItem(\"favList\"))\n      : []\n  );\n\n  localStorage.setItem(\"favList\", JSON.stringify(favourites));\n\n  function getColumns() {\n    let columns = [];\n    if (branches.length) {\n      Object.keys(branches[0]).forEach((key) => {\n        if (key === \"favourite\") {\n          columns.push({\n            title: parseLabel(key),\n            dataIndex: key,\n            key: key,\n            filters: [\n              { text: \"Favourite Only\", value: \"Favourite\" },\n              { text: \"All\", value: \"All\" },\n            ],\n            onFilter: (selected, record) => {\n              if (selected === \"Favourite\") {\n                return favourites.indexOf(record.ifsc) !== -1;\n              } else {\n                return true;\n              }\n            },\n          });\n        } else {\n          columns.push({\n            title: parseLabel(key),\n            dataIndex: key,\n            key: key,\n          });\n        }\n      });\n    }\n    return columns;\n  }\n\n  function handleFavourite(selected, ifscCode) {\n    if (selected) {\n      setFavourites([...favourites, ifscCode]);\n    } else {\n      setFavourites(favourites.filter((ifsc) => ifsc !== ifscCode));\n    }\n  }\n\n  function formatData() {\n    return branches.map((branch, ind) => {\n      if (ind > 50) return branch;\n      branch[\"bank_id\"] = (\n        <Link to={\"/bank/\" + branch[\"bank_id\"]}>{branch[\"bank_id\"]}</Link>\n      );\n      branch[\"favourite\"] = (\n        <Rate\n          value={favourites.indexOf(branch[\"ifsc\"]) !== -1 ? 1 : 0}\n          count={1}\n          onChange={(selected) => handleFavourite(selected, branch[\"ifsc\"])}\n        />\n      );\n      return branch;\n    });\n  }\n\n  return (\n    <TableComp\n      columns={getColumns()}\n      dataSource={formatData()}\n      rowKey=\"ifsc\"\n      className=\"table\"\n    />\n  );\n};\n\nexport default Table;\n","import \"./App.css\";\nimport Table from \"./components/Table\";\nimport { debounce } from \"./utils/AppUtils\";\nimport { Input, Select } from \"antd\";\nimport { SearchOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst { Option } = Select;\n\nfunction App() {\n  const [branches, setBranches] = useState([]);\n  const [state, setState] = useState(\"Any\");\n  const [city, setCity] = useState(\"Any\");\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  let filteredData = [];\n\n  useEffect(() => {\n    axios.get(\"/api/branches\").then(({ data }) => {\n      setBranches(data);\n      setLoading(false);\n    });\n  }, []);\n\n  //filter data IIFE\n  (function filter() {\n    //filter as per state\n    if (state !== \"Any\") {\n      if (city !== \"Any\") {\n        filteredData = branches.filter(\n          (branch) => branch.state === state && branch.city === city\n        );\n      } else {\n        filteredData = branches.filter((branch) => branch.state === state);\n      }\n    } else filteredData = branches;\n\n    //filter as per search\n    if (searchText.length) {\n      filteredData = filteredData.filter((branch) => {\n        let shouldInclude = false;\n        Object.keys(branch).forEach((key) => {\n          if (key === \"favourite\") {\n          } else if (key === \"bank_id\")\n            shouldInclude |= branch[key] === Number(searchText);\n          else shouldInclude |= branch[key].includes(searchText);\n        });\n        return shouldInclude;\n      });\n    }\n  })();\n\n  //fetch cities as per state selected\n  function getCities() {\n    if (state !== \"Any\") {\n      let cities = new Set();\n      branches.forEach((branch) => {\n        if (branch.state === state) cities.add(branch.city);\n      });\n      return [...cities].sort().map((city) => (\n        <Option key={city} value={city}>\n          {city}\n        </Option>\n      ));\n    } else return [];\n  }\n\n  //get states from data\n  function getStates() {\n    let states = new Set();\n    branches.forEach((branch) => states.add(branch.state));\n    return [...states].sort().map((state) => (\n      <Option key={state} value={state}>\n        {state}\n      </Option>\n    ));\n  }\n\n  //when user changes state\n  function stateChangeHandler(newState) {\n    setState(newState);\n    setCity(\"Any\");\n  }\n\n  //when user types in search bar\n  function searchHandler(e) {\n    let text = e.target.value;\n    if (Number.isNaN(Number(text))) setSearchText(text.toUpperCase());\n    else setSearchText(text);\n  }\n\n  return (\n    <div className=\"app\">\n      {loading ? (\n        <LoadingOutlined className=\"loadingIcon\" />\n      ) : (\n        <>\n          <h1>Branches</h1>\n          <div className=\"searchContainer\">\n            <div className=\"citySearch\">\n              <label htmlFor=\"state\">State: </label>\n              <Select\n                value={state}\n                className=\"stateSearchBar\"\n                onChange={stateChangeHandler}\n              >\n                <Option value=\"Any\" key=\"any\">\n                  Any\n                </Option>\n                {getStates()}\n              </Select>\n\n              <label htmlFor=\"city\">City: </label>\n              <Select\n                value={city}\n                className=\"citySearchBar\"\n                onChange={setCity}\n                disabled={state === \"Any\"}\n              >\n                <Option value=\"Any\" key=\"any\">\n                  Any\n                </Option>\n                {getCities()}\n              </Select>\n            </div>\n            <Input\n              size=\"large\"\n              placeholder=\"Search\"\n              className=\"searchBar\"\n              onChange={debounce(searchHandler)}\n              prefix={<SearchOutlined />}\n            />\n          </div>\n          <Table branches={filteredData} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import Bank from \"./Bank\";\nexport default Bank;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport Table from \"../Table\";\nimport axios from \"axios\";\n\nconst Bank = (props) => {\n  const params = useParams();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  let bankId = params.id;\n\n  useEffect(() => {\n    axios.get(\"/api/banks/\" + bankId).then(({ data }) => {\n      setData(data);\n      setLoading(false);\n    });\n  }, [bankId]);\n\n  return loading ? (\n    <LoadingOutlined className=\"loadingIcon\" />\n  ) : (\n    <div className=\"app\">\n      <img src=\"/assets/images/bank.svg\" alt=\"bank\" width={100} />\n      <h1>{data.name || \"Bank Not Found\"}</h1>\n      <h4>Total Branches: {data.branches ? data.branches.length : 0}</h4>\n      <Table branches={data.branches || []} />\n    </div>\n  );\n};\n\nexport default Bank;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport Bank from \"./components/Bank\";\n\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact>\n          <App />\n        </Route>\n        <Route path=\"/bank/:id\" exact>\n          <Bank />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}