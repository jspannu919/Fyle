{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jaideeppannu/Desktop/learning/fyle/src/client/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport Table from \"./components/Table\";\nimport { Input, Select } from \"antd\";\nimport { SearchOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst {\n  Option\n} = Select;\n\nfunction App() {\n  _s();\n\n  const [branches, setBranches] = useState([]);\n  const [state, setState] = useState(\"Any\");\n  const [city, setCity] = useState(\"Any\");\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  let filteredData = [];\n  useEffect(() => {\n    axios.get(\"/api/branches\").then(({\n      data\n    }) => {\n      setBranches(data);\n      setLoading(false);\n    });\n  }, []); //filter data IIFE\n\n  (function filter() {\n    //filter as per state\n    if (state !== \"Any\") {\n      if (city !== \"Any\") {\n        filteredData = branches.filter(branch => branch.state === state && branch.city === city);\n      } else {\n        filteredData = branches.filter(branch => branch.state === state);\n      }\n    } else filteredData = branches; //filter as per search\n\n\n    if (searchText.length) {\n      filteredData = branches.filter(branch => {\n        let shouldInclude = false;\n        Object.keys(branch).forEach(key => {\n          if (key === \"bank_id\" && !Number.isNaN(Number(searchText))) shouldInclude |= branch[key] === Number(searchText);else shouldInclude |= branch[key].includes(searchText);\n        });\n        return shouldInclude;\n      });\n    }\n  })(); //fetch cities as per state selected\n\n\n  function getCities() {\n    if (state !== \"Any\") {\n      let cities = new Set();\n      branches.forEach(branch => {\n        if (branch.state === state) cities.add(branch.city);\n      });\n      return [...cities].sort().map(city => /*#__PURE__*/_jsxDEV(Option, {\n        value: city,\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }, this));\n    } else return [];\n  } //get states from data\n\n\n  function getStates() {\n    let states = new Set();\n    branches.forEach(branch => states.add(branch.state));\n    return [...states].sort().map(state => /*#__PURE__*/_jsxDEV(Option, {\n      value: state,\n      children: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }, this));\n  } //when user changes state\n\n\n  function stateChangeHandler(newState) {\n    setState(newState);\n    setCity(\"Any\");\n  } //when user types in search bar\n\n\n  function searchHandler(text) {\n    if (Number.isNaN(Number(text))) setSearchText(text.toUpperCase());else setSearchText(text);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: loading ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {\n      className: \"loadingIcon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Branches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"citySearch\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"state\",\n            children: \"State: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: state,\n            className: \"stateSearchBar\",\n            onChange: stateChangeHandler,\n            children: [/*#__PURE__*/_jsxDEV(Option, {\n              value: \"Any\",\n              children: \"Any\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this), getStates()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"city\",\n            children: \"City: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: city,\n            className: \"citySearchBar\",\n            onChange: setCity,\n            disabled: state === \"Any\",\n            children: [/*#__PURE__*/_jsxDEV(Option, {\n              value: \"any\",\n              children: \"Any\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), getCities()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          size: \"large\",\n          placeholder: \"Search\",\n          className: \"searchBar\",\n          onChange: searchHandler,\n          prefix: /*#__PURE__*/_jsxDEV(SearchOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        branches: filteredData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CAIcZA3wdijpNaQE9zB7MhTi4WM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jaideeppannu/Desktop/learning/fyle/src/client/src/App.jsx"],"names":["Table","Input","Select","SearchOutlined","LoadingOutlined","useState","useEffect","axios","Option","App","branches","setBranches","state","setState","city","setCity","searchText","setSearchText","loading","setLoading","filteredData","get","then","data","filter","branch","length","shouldInclude","Object","keys","forEach","key","Number","isNaN","includes","getCities","cities","Set","add","sort","map","getStates","states","stateChangeHandler","newState","searchHandler","text","toUpperCase"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport Table from \"./components/Table\";\nimport { Input, Select } from \"antd\";\nimport { SearchOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst { Option } = Select;\n\nfunction App() {\n  const [branches, setBranches] = useState([]);\n  const [state, setState] = useState(\"Any\");\n  const [city, setCity] = useState(\"Any\");\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  let filteredData = [];\n\n  useEffect(() => {\n    axios.get(\"/api/branches\").then(({ data }) => {\n      setBranches(data);\n      setLoading(false);\n    });\n  }, []);\n\n  //filter data IIFE\n  (function filter() {\n    //filter as per state\n    if (state !== \"Any\") {\n      if (city !== \"Any\") {\n        filteredData = branches.filter(\n          (branch) => branch.state === state && branch.city === city\n        );\n      } else {\n        filteredData = branches.filter((branch) => branch.state === state);\n      }\n    } else filteredData = branches;\n\n    //filter as per search\n    if (searchText.length) {\n      filteredData = branches.filter((branch) => {\n        let shouldInclude = false;\n        Object.keys(branch).forEach((key) => {\n          if (key === \"bank_id\" && !Number.isNaN(Number(searchText)))\n            shouldInclude |= branch[key] === Number(searchText);\n          else shouldInclude |= branch[key].includes(searchText);\n        });\n        return shouldInclude;\n      });\n    }\n  })();\n\n  //fetch cities as per state selected\n  function getCities() {\n    if (state !== \"Any\") {\n      let cities = new Set();\n      branches.forEach((branch) => {\n        if (branch.state === state) cities.add(branch.city);\n      });\n      return [...cities]\n        .sort()\n        .map((city) => <Option value={city}>{city}</Option>);\n    } else return [];\n  }\n\n  //get states from data\n  function getStates() {\n    let states = new Set();\n    branches.forEach((branch) => states.add(branch.state));\n    return [...states]\n      .sort()\n      .map((state) => <Option value={state}>{state}</Option>);\n  }\n\n  //when user changes state\n  function stateChangeHandler(newState) {\n    setState(newState);\n    setCity(\"Any\");\n  }\n\n  //when user types in search bar\n  function searchHandler(text) {\n    if (Number.isNaN(Number(text))) setSearchText(text.toUpperCase());\n    else setSearchText(text);\n  }\n\n  return (\n    <div className=\"app\">\n      {loading ? (\n        <LoadingOutlined className=\"loadingIcon\" />\n      ) : (\n        <>\n          <h1>Branches</h1>\n          <div className=\"searchContainer\">\n            <div className=\"citySearch\">\n              <label htmlFor=\"state\">State: </label>\n              <Select\n                value={state}\n                className=\"stateSearchBar\"\n                onChange={stateChangeHandler}\n              >\n                <Option value=\"Any\">Any</Option>\n                {getStates()}\n              </Select>\n\n              <label htmlFor=\"city\">City: </label>\n              <Select\n                value={city}\n                className=\"citySearchBar\"\n                onChange={setCity}\n                disabled={state === \"Any\"}\n              >\n                <Option value=\"any\">Any</Option>\n                {getCities()}\n              </Select>\n            </div>\n            <Input\n              size=\"large\"\n              placeholder=\"Search\"\n              className=\"searchBar\"\n              onChange={searchHandler}\n              prefix={<SearchOutlined />}\n            />\n          </div>\n          <Table branches={filteredData} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}